{"ast":null,"code":"var _jsxFileName = \"/Users/pamelajeanwhite/Documents/devFolder/JS411/JS411Homework/punk-api-react-app/src/App.js\";\nimport React from 'react';\nimport Beers from './components/Beers';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet PUNK_API = 'https://api.punkapi.com/v2/beers';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.likeBeer = index => {\n      console.log(\"The index passed to likeBeer()\", index);\n\n      if (this.state.likedArray.includes(index)) {\n        console.log(\"yes, this array already includes the index\");\n      }\n\n      this.state.likedArray.push(index);\n      console.log(\"index of beer in likedArray: \", this.state.likedArray);\n    };\n\n    this.state = {\n      //array that is going to hold the beers\n      beers: [],\n      likedArray: []\n    };\n  } //componentDidMount is a lifecycle method\n  //async/ await\n  //make this an asynchronous function with async, \n  //so we don't need to use the  .then syntax\n\n\n  async componentDidMount() {\n    let response = await fetch(PUNK_API);\n    console.log(\"response after fetch:\", response);\n    let beers = await response.json();\n    console.log(\"beers after await\", beers);\n    this.setState({\n      beers\n    });\n  } //for us to see an accurate update of our data\n  //cdu tab\n\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log('This is from state: ', this.state.beers);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"PUNK API\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Beers, {\n        clickToLike: this.likeBeer,\n        beers: this.state.beers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  } //promises\n  //there was an error in this\n  //res was undefined\n  // componentDidMount() {\n  //   fetch(PUNK_API)\n  //   .then((res)= res.json())\n  //  // this.setState updates state, which is currently an empty array\n  //   .then((data) => this.setState{\n  //    //points at beers (which was an empty array) and says beer is now data\n  //    //set data to the label beers\n  //     beers: data\n  //   })\n  // }\n\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/pamelajeanwhite/Documents/devFolder/JS411/JS411Homework/punk-api-react-app/src/App.js"],"names":["React","Beers","PUNK_API","App","Component","constructor","props","likeBeer","index","console","log","state","likedArray","includes","push","beers","componentDidMount","response","fetch","json","setState","componentDidUpdate","prevProps","prevState","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,OAAO,WAAP;;AAEA,IAAIC,QAAQ,GAAG,kCAAf;;AAEA,MAAMC,GAAN,SAAkBH,KAAK,CAACI,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;;AADgB,SA6BlBC,QA7BkB,GA6BNC,KAAD,IAAW;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CF,KAA9C;;AACA,UAAG,KAAKG,KAAL,CAAWC,UAAX,CAAsBC,QAAtB,CAA+BL,KAA/B,CAAH,EAAyC;AACvCC,QAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ;AACD;;AACD,WAAKC,KAAL,CAAWC,UAAX,CAAsBE,IAAtB,CAA2BN,KAA3B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6C,KAAKC,KAAL,CAAWC,UAAxD;AACD,KApCiB;;AAEhB,SAAKD,KAAL,GAAa;AACX;AACAI,MAAAA,KAAK,EAAE,EAFI;AAGXH,MAAAA,UAAU,EAAE;AAHD,KAAb;AAKD,GAR+B,CAUhC;AACA;AACA;AACA;;;AACuB,QAAjBI,iBAAiB,GAAG;AACxB,QAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAChB,QAAD,CAA1B;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCO,QAArC;AACA,QAAIF,KAAK,GAAG,MAAME,QAAQ,CAACE,IAAT,EAAlB;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCK,KAAjC;AACA,SAAKK,QAAL,CAAc;AACZL,MAAAA;AADY,KAAd;AAGD,GAtB+B,CAwBhC;AACA;;;AACAM,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACvCd,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoC,KAAKC,KAAL,CAAWI,KAA/C;AACD;;AAWDS,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,KAAD;AAAO,QAAA,WAAW,EAAE,KAAKjB,QAAzB;AAAmC,QAAA,KAAK,EAAE,KAAKI,KAAL,CAAWI;AAArD;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAQD,GAhD+B,CAkDhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA9DgC;;AAiElC,eAAeZ,GAAf","sourcesContent":["import React from 'react'\n\nimport Beers from './components/Beers'\n\nimport './App.css';\n\nlet PUNK_API = 'https://api.punkapi.com/v2/beers'\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      //array that is going to hold the beers\n      beers: [],\n      likedArray: []\n    }\n  }\n\n  //componentDidMount is a lifecycle method\n  //async/ await\n  //make this an asynchronous function with async, \n  //so we don't need to use the  .then syntax\n  async componentDidMount() {\n    let response = await fetch(PUNK_API);\n    console.log(\"response after fetch:\", response)\n    let beers = await response.json()\n    console.log(\"beers after await\", beers)\n    this.setState({\n      beers\n    })\n  }\n\n  //for us to see an accurate update of our data\n  //cdu tab\n  componentDidUpdate(prevProps, prevState) {\n    console.log('This is from state: ', this.state.beers)\n  }\n\n  likeBeer = (index) => {\n    console.log(\"The index passed to likeBeer()\", index)\n    if(this.state.likedArray.includes(index)){\n      console.log(\"yes, this array already includes the index\")\n    }\n    this.state.likedArray.push(index)\n    console.log(\"index of beer in likedArray: \", this.state.likedArray)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n     \n        <h1>PUNK API</h1>\n        <Beers clickToLike={this.likeBeer} beers={this.state.beers}/>\n    \n    </div>\n    );\n  }\n\n  //promises\n  //there was an error in this\n  //res was undefined\n  // componentDidMount() {\n  //   fetch(PUNK_API)\n  //   .then((res)= res.json())\n  //  // this.setState updates state, which is currently an empty array\n  //   .then((data) => this.setState{\n  //    //points at beers (which was an empty array) and says beer is now data\n  //    //set data to the label beers\n  //     beers: data\n  //   })\n  // }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}